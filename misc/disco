#!/usr/bin/ruby
# $Id$
#TODO
#	add property support
#	need better alias support
#	YAML and XML ouput/input

require 'pp'
require 'yaml'
require 'getoptlong'
require 'parsedate'

def target_resources(resources)
	res_resources = []
	nb_res_nodes = Hash.new(0)
	dead_nodes = Hash.new(0)
	max_resources = 0

	resources.each do |resource,values|
		max_resources = max_resources + 1
		if values['state'] != 'Dead'
			res_resources << resource
			nb_res_nodes[values['network_address']] = nb_res_nodes[values['network_address']] + 1 
		else
			dead_nodes[values['network_address']] = dead_nodes[values['network_address']] + 1 
		end
	end
	return max_resources, res_resources, nb_res_nodes, dead_nodes
end

def discover_max_available_resources(grid_gantt)
	nb_resources = 0
	nb_nodes = 0

	oargridsub_params = ""
	oargridsub_params_nodes = ""
	puts
	grid_gantt.each do |res_alias,gantt|
		puts "#{res_alias}: "
		max_resources, res_resources, nb_res_nodes, dead_nodes = target_resources(gantt["resources"])

		gantt["jobs"].each do |job,values|
		  if !(values['properties'] =~ /besteffort = 'YES'/)
				values['resources'].each do |resource|
					res_resources.delete(resource)
				end
			end
		end

		# determine the number of fully available nodes
		res_resources.each do |rid|
				nb_res_nodes[gantt["resources"][rid]['network_address']] = nb_res_nodes[gantt["resources"][rid]['network_address']] - 1
		end

		nb_fully_available_nodes = nb_res_nodes.inject(0) { |nb,nbr_nodes|  nb=nb+1 if nbr_nodes.last == 0 ; nb } if !nb_res_nodes.nil?

		puts "  resources:(max/dead/avail):       #{max_resources}/#{max_resources-res_resources.length}/#{res_resources.length}"
		puts "  nodes:    (max/dead/fully_avail): #{dead_nodes.length + nb_res_nodes.length }/#{dead_nodes.length}/#{nb_fully_available_nodes}"

		oargridsub_params = oargridsub_params + "#{res_alias}:rdef=\"core=#{res_resources.length}\"," if res_resources.length > 0
		oargridsub_params_nodes  = oargridsub_params_nodes + "#{res_alias}:rdef=\"nodes=#{nb_fully_available_nodes}\"," if nb_fully_available_nodes > 0

		nb_resources = nb_resources + res_resources.length
		nb_nodes = nb_nodes + nb_fully_available_nodes

	end

	puts
	puts "Nb available resources:    #{nb_resources}"
	puts "Nb fully available nodes:  #{nb_nodes}"
	puts
	return oargridsub_params.chop, oargridsub_params_nodes.chop
end

def usage_message
   <<EOS
Usage: disco [-h] | [-v] [-s start_date] [-w walltime] [-a] [-o oargrid options]  [-S site] [-r] res_alias [res_alias1] ...

A simple resource discovery tool for oargrid to find the maximum available resources on a given time range for specifed alias(s) of resources.
    -h display this help message
    -s specify the start date to find available resources
    -w walltime (1 hour by default)
    -r do the reservation
		-a set -t allow_classic_ssh option for oargridsub and node resource reservation
		-o specify oargrid option (as -t, -p and -d)
		-S specify site where reservation is initiated (grenoble by default)
    -v verbose

Example:
disco idpot
Find available resources from now to now + 1 hour on idpot cluster.

disco nancy sophia rennes
Find available resources from now to now + 1 hour on nancy sophia and rennes sites.

disco -r -s "2007-08-07 14:31:00" -w 2:00:00 idpot grillon
Find and reserve available resources from specify time during 2 hours on gdx and grillon clusters.

disco -r -a -o "-v" -s "2007-08-07 14:31:00" -w 2:00:00 idpot grillon
Find and reserve available resources from specify time during 2 hours on gdx and grillon clusters with -t allow_classic_ssh and -v options enabled for oargridsub.

Note: 
Configure .ssh/config to operate transparently outside G5K, as following (by example):

  Host frontend.*.grid5000.fr
  User #your_g5k_username#
  ProxyCommand ssh #your_g5k_username#\@#your_g5k_acces_machine# "nc -q 180 %h %p"

EOS

end

######
# Main
######

$verbose = false
$reserve = false
$allow_classic_ssh = false

opts = GetoptLong.new(
[ "--verbose","-v",		GetoptLong::NO_ARGUMENT ],
[ "--start_date","-s",	GetoptLong::REQUIRED_ARGUMENT ],
[ "--walltime","-w",	GetoptLong::REQUIRED_ARGUMENT ],
[ "--options","-o", GetoptLong::REQUIRED_ARGUMENT ],
[ "--reserve","-r",		GetoptLong::NO_ARGUMENT ],
[ "--allow_classic_ssh","-a",		GetoptLong::NO_ARGUMENT ],
[ "--site","-S",  GetoptLong::REQUIRED_ARGUMENT ],
[ "--help","-h",			GetoptLong::NO_ARGUMENT ]

)

site = "grenoble"
str_walltime = "1:00:00"
walltime = 1 * 3600

t_start = Time.new
oargridsub_options = ""
opts.each do |option, value|
	if (option == "--start_date")
		res = ParseDate.parsedate(value)
		t_start =  Time.local(*res)
 	elsif (option == "--walltime")
		str_walltime = value
		h,m,s = value.split(':')
		walltime = h.to_i * 3600 + m.to_i * 60 + s.to_i
	elsif (option == "--reserve")
		$reserve = true
		elsif (option == "--allow_classic_ssh")
		$allow_classic_ssh = true
	elsif (option == "--options")
  	oargridsub_options = value
	elsif (option == "--site")
		site = value
	elsif (option == "--verbose")
  	$verbose = true
	elsif (option == "--help")
		puts usage_message
		exit 0
  end
end

t_s = t_start.strftime("%Y-%m-%d %H:%M:%S")
t_end =  t_start + walltime
t_e = t_end.strftime("%Y-%m-%d %H:%M:%S")

cmd_oargridstat = "ssh frontend.#{site}.grid5000.fr 'oargridstat -Y --gantt \"#{t_s},#{t_e}\"" 

if ARGV.length == 0
	puts usage_message 
	exit 0
end

ARGV.each do |res_alias|
	cmd_oargridstat = cmd_oargridstat + " -c #{res_alias}"
end
cmd_oargridstat = cmd_oargridstat + "'"
puts cmd_oargridstat if $verbose

gantt_yaml = `#{cmd_oargridstat}`
#puts gantt_yaml
#exit
#gantt_yaml = `cat capricorne.yml`
#puts gantt_yaml

grid_gantt = YAML.load(gantt_yaml)

oargridsub_params, oargridsub_params_nodes = discover_max_available_resources(grid_gantt)

cmd_oargridsub = "oargridsub -s \"#{t_s}\" -w #{str_walltime}  #{oargridsub_options} #{oargridsub_params}"
cmd_oargridsub_nodes = "oargridsub -t allow_classic_ssh -s \"#{t_s}\" -w #{str_walltime}  #{oargridsub_options} #{oargridsub_params_nodes}"

o_params = oargridsub_params.gsub('"','\\"')
o_params = oargridsub_params.gsub("'","\\\\'")

o_params_nodes = oargridsub_params_nodes.gsub('"','\\"')
o_params_nodes = oargridsub_params_nodes.gsub("'","\\\\'")

ssh_cmd_oargridsub = 'ssh frontend.'+site+'.grid5000.fr oargridsub -s \"'+t_s+'\"  -w ' + str_walltime + ' ' + oargridsub_options  + ' ' + o_params
ssh_cmd_oargridsub_nodes = 'ssh frontend.'+site+'.grid5000.fr oargridsub -t allow_classic_ssh -s \"'+t_s+'\"  -w ' + str_walltime + ' ' + oargridsub_options  + ' ' + o_params_nodes


if !$reserve
	puts
	puts "To reserve at resource level (inside/outside):"
	puts "  " + cmd_oargridsub 
	puts "  " + ssh_cmd_oargridsub
	puts
	puts "To reserve at nodes level with -t allow_classic_ssh enabled (inside/outside)::"
	puts "  " + cmd_oargridsub_nodes 
	puts "  " + ssh_cmd_oargridsub_nodes
	puts
else
	puts
	if !$allow_classic_ssh
		puts "Reserving at resource level..."
		puts "  " + ssh_cmd_oargridsub
		system(ssh_cmd_oargridsub)
	else
		puts "Reserving at node level..."
		puts "  " + ssh_cmd_oargridsub_nodes
		system(ssh_cmd_oargridsub_nodes)
	end
end
